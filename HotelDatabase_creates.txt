--By William Nguyen and Austin Green

--Fixed some commas in the CREATE statements
--looked at where parenthesis were.
DROP TABLE ROOM;
DROP TABLE BOOKING;

--Hotel        (hotelNo, hotelName, city)
CREATE TABLE HOTEL(
    hotelNo INT NOT NULL, 
    hotelName VARCHAR(20), 
    city VARCHAR(20),
    primary key(hotelNo)
);

--Room        (roomNo, H_hotelNo, type, price)
CREATE TABLE ROOM (
    roomNo INT NOT NULL, 
    H_hotelNo INT NOT NULL,
    roomType VARCHAR(10) DEFAULT 'Standard',
    price decimal(5,2) NOT NULL,
primary key(roomNo, H_hotelNo),
CONSTRAINT fkHotelNo FOREIGN key (H_hotelNo) References HOTEL (hotelNo),
CONSTRAINT price_range CHECK (price BETWEEN 50.00 and 500.00),
CONSTRAINT roomNo_range CHECK (roomNo BETWEEN 1 and 9999),
CONSTRAINT roomTypes CHECK (roomType IN('Standard', 'Suite', 'Penthouse', 'Double', 'Single'))
);

--Guest        (guestNo, guestName, guestAddress)
CREATE TABLE GUEST (
    guestNo INT NOT NULL,
    guestName VARCHAR(20) NOT NULL,
    guestAddress VARCHAR(30),
    primary key(guestNo)
);

CREATE TABLE BOOKING 
(H_hotelNo INT NOT NULL,
G_guestNo INT NOT NULL,
dateFrom DATE NOT NULL,
dateTo DATE NOT NULL,
R_roomNo INT NOT NULL,
primary key (H_hotelNo, G_guestNo, R_roomNo, dateFrom),
foreign key(G_guestNo) References GUEST(guestNo),
foreign key(R_roomNo, H_hotelNo) References ROOM(roomNo, H_hotelNo),
CONSTRAINT dateOrder Check (dateFrom < dateTo)
);

--hotel inserts
insert into HOTEL values (1, 'Death Inn', 'Seattle'); 

insert into HOTEL values (2, 'Life Inn', 'Chicago'); 

insert into HOTEL values (3, 'Earth Inn', 'Olympia'); 

insert into HOTEL values (4, 'World Inn', 'Bothell'); 

insert into HOTEL values (5, 'Ocean Inn', 'Columbus'); 

insert into HOTEL values (6, 'Hilton', 'Columbus'); 

insert into HOTEL values (7, 'Ocean', 'Las Vegas'); 

insert into HOTEL values (8, 'Ocean', 'Columbus'); 

insert into HOTEL values (9, 'Ocean2', 'Las Vegas'); 

insert into HOTEL values (10, 'Ocean3', 'Las Vegas'); 

--guest inserts
insert into GUEST values (1, "John Doe", "Seattle,Washington");
insert into GUEST values (2, "Jane Doe", "Seattle, Washington");
insert into GUEST values (3, "Person Name", "Portland, Oregon");
insert into GUEST values (4, "PLACE HOLDER", "123456");

--    Display all information in the hotel relation. 

SELECT *
FROM HOTEL;

--    List the names and address of guests from Seattle.  Note that guestAddress includes the city, state, etc. 
-- WHERE CustomerName LIKE '%or%' 	Finds any values that have "or" in any position

SELECT guestName, guestAddress
FROM GUEST
WHERE guestAddress LIKE '%Seattle%';

--    Modify query #2 to do the listing alphabetically by name 

SELECT guestName, guestAddress
FROM GUEST
WHERE guestAddress LIKE '%Seattle%'
ORDER BY guestName;

--    Determine the number of hotels in the database. 

SELECT COUNT(*)
FROM HOTEL;


--    Determine how many different guests have made bookings for some part of March 2009, for instance, bookings at any point between March 1st and March 31st (check in date on or after March 1st, and check out date on or before March 31st). 
--using between

--    Count how many hotels there are in each city.  

--    List the hotelNo and average price of ‘Standard’ rooms at each hotel. 

--    List the name of all guests currently staying at the Hilton (scroll down for ways of getting the date). 

--    Count the number of rooms in each hotel in "Las Vegas" along with the name of the hotel.

-- Discussion
--    Is it better to regenerate the table or just update it?  Consider the situation when the table has not 20, but 20 million records. 
--    What are the pros and cons of changing the table vs. re-creating it from scratch? 
--    What could you do if you were not allowed to re-create a table from scratch, i.e., you can only modify it?