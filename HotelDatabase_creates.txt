--By William Nguyen and Austin Green

--Fixed some commas in the CREATE statements
--looked at where parenthesis were.
DROP TABLE ROOM;
DROP TABLE BOOKING;

-- Hotel
-- (hotelNo, hotelName, city)
CREATE TABLE HOTEL(
    hotelNo INT NOT NULL, 
    hotelName VARCHAR(20), 
    city VARCHAR(20),
    primary key(hotelNo)
);

-- Room
-- (roomNo, H_hotelNo, type, price)
CREATE TABLE ROOM (
    roomNo INT NOT NULL, 
    H_hotelNo INT NOT NULL,
    roomType VARCHAR(10) DEFAULT 'Standard',
    price decimal(5,2) NOT NULL,
	primary key(roomNo, H_hotelNo),
	CONSTRAINT fkHotelNo FOREIGN key (H_hotelNo) References HOTEL (hotelNo),
	CONSTRAINT price_range CHECK (price BETWEEN 50.00 and 500.00),
	CONSTRAINT roomNo_range CHECK (roomNo BETWEEN 1 and 9999),
	CONSTRAINT roomTypes CHECK (roomType IN('Standard', 'Suite', 'Penthouse', 'Double', 'Single'))
);

-- Guest
-- (guestNo, guestName, guestAddress)
CREATE TABLE GUEST (
    guestNo INT NOT NULL,
    guestName VARCHAR(20) NOT NULL,
    guestAddress VARCHAR(30),
    primary key(guestNo)
);

CREATE TABLE BOOKING (
	H_hotelNo INT NOT NULL,
	G_guestNo INT NOT NULL,
	dateFrom DATE NOT NULL,
	dateTo DATE NOT NULL,
	R_roomNo INT NOT NULL,
	primary key (H_hotelNo, G_guestNo, R_roomNo, dateFrom),
	foreign key(G_guestNo) References GUEST(guestNo),
	foreign key(R_roomNo, H_hotelNo) References ROOM(roomNo, H_hotelNo),
	CONSTRAINT dateOrder Check (dateFrom < dateTo)
);

--6 is Hilton
--booking inserts
insert into BOOKING values(6,1, '2019-02-20', '2019-02-21',1);
insert into BOOKING values(6,3, '2019-01-01', '2019-01-02',2);
insert into BOOKING values(1,2, '2019-02-20', '2019-02-21',1);


--hotel inserts
insert into HOTEL values (1, 'Death Inn', 'Seattle'); 
insert into HOTEL values (2, 'Life Inn', 'Chicago'); 
insert into HOTEL values (3, 'Earth Inn', 'Olympia'); 
insert into HOTEL values (4, 'World Inn', 'Bothell'); 
insert into HOTEL values (5, 'Ocean Inn', 'Columbus'); 
insert into HOTEL values (6, 'Hilton', 'Columbus'); 
insert into HOTEL values (7, 'Ocean', 'Las Vegas'); 
insert into HOTEL values (8, 'Ocean', 'Columbus'); 
insert into HOTEL values (9, 'Ocean2', 'Las Vegas'); 
insert into HOTEL values (10, 'Ocean3', 'Las Vegas'); 

--room inserts
insert into ROOM values (1, 1, 'Standard', 55.99);
insert into ROOM values (2, 1, 'Standard', 155.99);
insert into ROOM values (1, 2, 'Suite', 278.99);
insert into ROOM values (1, 3, 'Standard', 144.99);
insert into ROOM values (2, 3, 'Standard', 155.99);
insert into ROOM values (3, 3, 'Standard', 155.99);
insert into ROOM values (1, 4, 'Standard', 189.99);
insert into ROOM values (1, 5, 'Penthouse', 499.89);
insert into ROOM values (1, 6, 'Single', 99.99);
insert into ROOM values (2, 6, 'Single', 99.99);
insert into ROOM values (1, 7, 'Standard', 167.99);
insert into ROOM values (1, 8, 'Standard', 134.99);
insert into ROOM values (1, 9, 'Standard', 59.99);
insert into ROOM values (1, 10, 'Standard', 59.99);
insert into ROOM values (2, 10, 'Standard', 59.99);

--guest inserts
insert into GUEST values (1, "John Doe", "Seattle,Washington");
insert into GUEST values (2, "Jane Doe", "Seattle, Washington");
insert into GUEST values (3, "Person Name", "Portland, Oregon");
insert into GUEST values (4, "PLACE HOLDER", "123456");


--    QUERY 1
--    Display all information in the hotel relation. 
SELECT *
FROM HOTEL;

--    QUERY 2
--    List the names and address of guests from Seattle.  Note that guestAddress includes the city, state, etc. 
SELECT guestName, guestAddress
FROM GUEST
WHERE guestAddress LIKE '%Seattle%';

--    QUERY 3
--    Modify query #2 to do the listing alphabetically by name 
SELECT guestName, guestAddress
FROM GUEST
WHERE guestAddress LIKE '%Seattle%'
ORDER BY guestName;

--    QUERY 4
--    Determine the number of hotels in the database. 
SELECT COUNT(*)
FROM HOTEL;

--    QUERY 5
--    Determine how many different guests have made bookings for some part of March 2009, for instance, bookings at any point between March 1st and March 31st (check in date on or after March 1st, and check out date on or before March 31st). 
--    using between DATE - format YYYY-MM-DD
SELECT COUNT(G_guestNo)
FROM BOOKING
WHERE dateFrom BETWEEN '2019-03-01' AND '2019-03-15';

--    QUERY 6
--    Count how many hotels there are in each city.  
--    select hotels, group hotels by city
SELECT COUNT(*)
FROM HOTEL
GROUP BY city;

--    QUERY 7
--    List the hotelNo and average price of ‘Standard’ rooms at each hotel. 
SELECT H_hotelNo, AVG(price)
FROM ROOM
WHERE roomType='Standard'
GROUP BY H_hotelNo;

--    QUERY 8
--    List the name of all guests currently staying at the Hilton (scroll down for ways of getting the date). 
--    CURRENT_DATE() or (DATETIME('now')) can be used in SQLLite
--    need a union of guests (for guest name), bookings (for current stay), and hotel for hotel name
--    Cannot union if column name isn't the same? (H_hotelNo vs hotelNo)

SELECT guestName
FROM(SELECT H_hotelNo, G_guestNo, dateFrom, dateTo, 
guestNo, guestName, 
hotelNo, hotelName 
FROM BOOKING, GUEST, HOTEL
WHERE dateFrom <= date('now') AND 
dateTo >= date('now') AND
hotelName = 'Hilton' AND
H_hotelNo = hotelNo AND 
G_guestNo = guestNo) as tblHotelGuests;
--    QUERY 9
--    Count the number of rooms in each hotel in "Las Vegas" along with the name of the hotel.
--    Can use JOIN or nested queries?
SELECT hotelName, COUNT(roomNo) FROM HOTEL INNER JOIN ROOM ON Hotel.hotelNo == Room.H_hotelNo 
WHERE city = 'Las Vegas'
GROUP BY hotelName;


--    Discussion
--    Is it better to regenerate the table or just update it?  Consider the situation when the table has not 20, but 20 million records.
--    It's better to update  much larger tables (especially with 20 million) as you wouldn't have to regenerate all the values which would be expensive in time and space. 

--    What are the pros and cons of changing the table vs. re-creating it from scratch? 
--	  Changing a table allows for less cost in computation and space. You won't have to recreate it.
--    However, you have to change the values of the actual table, which you may not want to do. (you may just want to query or manipulate rather than changing the actual values)
--    Re-creating a table allows us a lot more flexibility in manipulating the data how we need to without damaging the original set.

--    What could you do if you were not allowed to re-create a table from scratch, i.e., you can only modify it?
--    You would have to reverse your calculations and manipulation involved in any complex queries.


